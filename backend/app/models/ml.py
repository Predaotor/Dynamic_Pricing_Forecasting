from sqlalchemy import Column, String, DateTime, Date, Numeric, ForeignKey, BigInteger, JSON
from sqlalchemy.dialects.postgresql import UUID
from app.core.db import Base
from datetime import datetime
import uuid

class ModelRun(Base):
    """
    Metadata for each ML model run (forecasting, elasticity, pricing).
    Fields:
        - id: UUID primary key
        - model_name: Name of the model
        - model_version: Version string
        - params: JSON parameters used for the run
        - started_at: Start timestamp
        - finished_at: End timestamp (nullable)
    """
    __tablename__ = "model_runs"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4, unique=True, nullable=False)
    model_name = Column(String, nullable=False)
    model_version = Column(String, nullable=False)
    params = Column(JSON, nullable=True)
    started_at = Column(DateTime, default=datetime.now, nullable=False)
    finished_at = Column(DateTime, nullable=True)

class Forecast(Base):
    """
    Forecasted demand for a product on a specific date, generated by a model run.
    Fields:
        - id: BigInteger primary key
        - product_id: UUID foreign key to products
        - model_run_id: UUID foreign key to model_runs
        - target_date: Date of forecast
        - predicted_units: Predicted units sold
        - created_at: Timestamp of creation
    """
    __tablename__ = "forecasts"
    id = Column(BigInteger, primary_key=True, autoincrement=True)
    product_id = Column(UUID(as_uuid=True), ForeignKey("products.id"), nullable=False)
    model_run_id = Column(UUID(as_uuid=True), ForeignKey("model_runs.id"), nullable=False)
    target_date = Column(Date, nullable=False)
    predicted_units = Column(Numeric, nullable=False)
    created_at = Column(DateTime, default=datetime.now, nullable=False)

class ElasticityEstimate(Base):
    """
    Price elasticity estimate for a product over a window, generated by a model run.
    Fields:
        - id: BigInteger primary key
        - product_id: UUID foreign key to products
        - model_run_id: UUID foreign key to model_runs
        - window_start: Start date of window
        - window_end: End date of window
        - elasticity: Estimated elasticity value
        - r2: R-squared of the fit
        - created_at: Timestamp of creation
    """
    __tablename__ = "elasticity_estimates"
    id = Column(BigInteger, primary_key=True, autoincrement=True)
    product_id = Column(UUID(as_uuid=True), ForeignKey("products.id"), nullable=False)
    model_run_id = Column(UUID(as_uuid=True), ForeignKey("model_runs.id"), nullable=False)
    window_start = Column(Date, nullable=False)
    window_end = Column(Date, nullable=False)
    elasticity = Column(Numeric, nullable=False)
    r2 = Column(Numeric, nullable=False)
    created_at = Column(DateTime, default=datetime.now, nullable=False)

class PriceRecommendation(Base):
    """
    Price recommendation for a product and date, generated by a model run.
    Fields:
        - id: BigInteger primary key
        - product_id: UUID foreign key to products
        - model_run_id: UUID foreign key to model_runs
        - target_date: Date for recommendation
        - objective: Optimization objective (e.g., revenue, profit)
        - suggested_price: Suggested price
        - expected_units: Expected units sold
        - expected_revenue: Expected revenue
        - expected_profit: Expected profit
        - created_at: Timestamp of creation
    """
    __tablename__ = "price_recommendations"
    id = Column(BigInteger, primary_key=True, autoincrement=True)
    product_id = Column(UUID(as_uuid=True), ForeignKey("products.id"), nullable=False)
    model_run_id = Column(UUID(as_uuid=True), ForeignKey("model_runs.id"), nullable=False)
    target_date = Column(Date, nullable=False)
    objective = Column(String, nullable=False)
    suggested_price = Column(Numeric, nullable=False)
    expected_units = Column(Numeric, nullable=False)
    expected_revenue = Column(Numeric, nullable=False)
    expected_profit = Column(Numeric, nullable=False)
    created_at = Column(DateTime, default=datetime.now, nullable=False)
